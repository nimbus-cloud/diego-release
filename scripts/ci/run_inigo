#!/bin/bash

set -e -x

export GOROOT=/usr/local/go
export PATH=${GOROOT}/bin:${PATH}

build_gardenlinux () {
  echo "Building garden-linux"
  export GARDEN_GOPATH=$PWD/garden-linux-release

  pushd "${GARDEN_GOPATH}/src/code.cloudfoundry.org/garden-linux"
    GOPATH=${GARDEN_GOPATH} make # compile wshd/etc.
    export GARDEN_BINPATH=$PWD/linux_backend/bin
  popd
}

build_gardenrunc () {
  echo "Building garden-runc"
  export GARDEN_GOPATH=$PWD/garden-runc-release

  pushd ${GARDEN_GOPATH}
    export GOPATH=${PWD}
    export PATH=${GOPATH}/bin:${PATH}
    export GARDEN_BINPATH=${PWD}/bin/

    if [ -d $GOPATH/src/github.com/cloudfoundry-incubator/guardian ]; then
        NSTAR_PATH=src/github.com/cloudfoundry-incubator/guardian/rundmc/nstar
        go install github.com/cloudfoundry-incubator/guardian/rundmc/iodaemon/cmd/iodaemon
        go install github.com/cloudfoundry-incubator/guardian/cmd/kawasaki/
        go install github.com/cloudfoundry-incubator/guardian/cmd/init/
        go install github.com/cloudfoundry-incubator/guardian/cmd/dadoo/
        go install github.com/cloudfoundry-incubator/guardian/cmd/inspector-garden/
    else
        NSTAR_PATH=src/code.cloudfoundry.org/guardian/rundmc/nstar
        go install code.cloudfoundry.org/guardian/cmd/init/
        go install code.cloudfoundry.org/guardian/cmd/dadoo/
        go install code.cloudfoundry.org/guardian/cmd/inspector-garden/
    fi

    pushd src/github.com/opencontainers/runc
      PKG_CONFIG_PATH=/usr/local/lib/pkgconfig GOPATH=${PWD}/Godeps/_workspace:${GOPATH} BUILDTAGS="seccomp" make static
      mv runc ${GARDEN_BINPATH}
    popd

    pushd $NSTAR_PATH
      make && cp nstar ${GARDEN_BINPATH}
    popd
  popd
}

if [ -z "${USE_GARDEN_RUNC}" ]; then
  build_gardenlinux
else
  build_gardenrunc
fi

cd diego-release/

export GOPATH_ROOT=$PWD

export GOPATH=${GOPATH_ROOT}
export PATH=${GOPATH_ROOT}/bin:${PATH}

export AUCTIONEER_GOPATH=${GOPATH_ROOT}
export CONVERGER_GOPATH=${GOPATH_ROOT}
export EXECUTOR_GOPATH=${GOPATH_ROOT}
export FILE_SERVER_GOPATH=${GOPATH_ROOT}
export CC_UPLOADER_GOPATH=${GOPATH_ROOT}
export BUILDPACK_APP_LIFECYCLE_GOPATH=${GOPATH_ROOT}
export DOCKER_APP_LIFECYCLE_GOPATH=${GOPATH_ROOT}
export NSYNC_GOPATH=${GOPATH_ROOT}
export BBS_GOPATH=${GOPATH_ROOT}
export REP_GOPATH=${GOPATH_ROOT}
export ROUTE_EMITTER_GOPATH=${GOPATH_ROOT}
export STAGER_GOPATH=${GOPATH_ROOT}
export TPS_GOPATH=${GOPATH_ROOT}

# These components vendor their own dependencies
export ROUTER_GOPATH=${GOPATH_ROOT}/src/github.com/cloudfoundry/gorouter/Godeps/_workspace:${GOPATH_ROOT}

# install application dependencies
echo "Installing go dependencies ..."
for package in github.com/coreos/etcd github.com/apcera/gnatsd; do
  go install $package
done

cd "${GOPATH_ROOT}/src/code.cloudfoundry.org/inigo"

go install github.com/onsi/ginkgo/ginkgo

# use the 1.28 version of tar that's installed in the inigo-ci docker image
ln -s /usr/local/bin/tar "${GARDEN_BINPATH}"

export GARDEN_ROOTFS=/tmp/opt/inigo/rootfs
mkdir -p "${GARDEN_ROOTFS}"
mount -t tmpfs tmpfs "${GARDEN_ROOTFS}"
cp -rp /opt/inigo/rootfs/* "${GARDEN_ROOTFS}"

# used for routing to apps; same logic that Garden uses.
EXTERNAL_ADDRESS=$(ip route get 8.8.8.8 | sed 's/.*src\s\(.*\)\s/\1/;tx;d;:x')
export EXTERNAL_ADDRESS

if [ "${USE_SQL}" = "mysql" ]; then
  cat << EOF > /etc/my.cnf
[mysqld]
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES
EOF

  sed -i 's/#max_connections.*= 100/max_connections = 2000/g' /etc/mysql/my.cnf

  service mysql start
elif [ "${USE_SQL}" = "postgres" ]; then
  sed -i 's/max_connections = 100/max_connections = 2000/g' /etc/postgresql/9.4/main/postgresql.conf
  service postgresql start
fi

# GARDEN_GRAPH_PATH is the root of the docker image filesystem
export GARDEN_GRAPH_PATH=/tmp/garden/graph
mkdir -p "${GARDEN_GRAPH_PATH}"
mount -t tmpfs tmpfs "${GARDEN_GRAPH_PATH}"

# workaround until Concourse's garden sets this up for us
if ! grep -qs '/sys' /proc/mounts; then
  mount -t sysfs sysfs /sys
fi

# shellcheck source=/dev/null
source "${GARDEN_GOPATH}/ci/scripts/aufs"
permit_device_control
create_loop_devices 256

nodes_flag=""
if [ "$GINKGO_PARALLEL" = "true" ]; then
  nodes_flag=-nodes=4
fi

pushd "${GOPATH_ROOT}/src/code.cloudfoundry.org/inigo"
  PACKAGES_TO_SKIP="docker"

  if [ -n "$SKIP_PACKAGES" ]; then
    PACKAGES_TO_SKIP=$PACKAGES_TO_SKIP",$SKIP_PACKAGES"
  fi

  ginkgo $nodes_flag -r -skipPackage="${PACKAGES_TO_SKIP}" -skip="${SKIP_REGEX}" -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing $@

  if [[ -z "$@" || "$@" =~ "docker" ]]; then
    # always run docker tests serially
    ginkgo -r -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing docker/
  fi
popd
