#!/bin/bash

set -e -x

export GOROOT=/usr/local/go
export PATH=${GOROOT}/bin:${PATH}

export GARDEN_LINUX_GOPATH=$PWD/garden-linux-release

cd diego-release/

export GOPATH_ROOT=$PWD

export GOPATH=${GOPATH_ROOT}
export PATH=${GOPATH_ROOT}/bin:${PATH}

export AUCTIONEER_GOPATH=${GOPATH_ROOT}
export CONVERGER_GOPATH=${GOPATH_ROOT}
export EXECUTOR_GOPATH=${GOPATH_ROOT}
export FILE_SERVER_GOPATH=${GOPATH_ROOT}
export CC_UPLOADER_GOPATH=${GOPATH_ROOT}
export BUILDPACK_APP_LIFECYCLE_GOPATH=${GOPATH_ROOT}
export DOCKER_APP_LIFECYCLE_GOPATH=${GOPATH_ROOT}
export NSYNC_GOPATH=${GOPATH_ROOT}
export BBS_GOPATH=${GOPATH_ROOT}
export REP_GOPATH=${GOPATH_ROOT}
export ROUTE_EMITTER_GOPATH=${GOPATH_ROOT}
export STAGER_GOPATH=${GOPATH_ROOT}
export TPS_GOPATH=${GOPATH_ROOT}

# These components vendor their own dependencies
export ROUTER_GOPATH=${GOPATH_ROOT}/src/github.com/cloudfoundry/gorouter/Godeps/_workspace:${GOPATH_ROOT}

# install application dependencies
echo "Installing go dependencies ..."
for package in github.com/coreos/etcd github.com/apcera/gnatsd; do
  go install $package
done

cd $GOPATH_ROOT/src/github.com/cloudfoundry-incubator/inigo

pushd $GARDEN_LINUX_GOPATH/src/github.com/cloudfoundry-incubator/garden-linux
  GOPATH=${GARDEN_LINUX_GOPATH} make # compile wshd/etc.
  export GARDEN_BINPATH=$PWD/linux_backend/bin
popd

go install github.com/onsi/ginkgo/ginkgo

# use the 1.28 version of tar that's installed in the inigo-ci docker image
ln -s /usr/local/bin/tar ${GARDEN_BINPATH}

export GARDEN_ROOTFS=/tmp/opt/inigo/rootfs
mkdir -p $GARDEN_ROOTFS
mount -t tmpfs tmpfs $GARDEN_ROOTFS
cp -rp /opt/inigo/rootfs/* $GARDEN_ROOTFS

# used for routing to apps; same logic that Garden uses.
export EXTERNAL_ADDRESS=$(ip route get 8.8.8.8 | sed 's/.*src\s\(.*\)\s/\1/;tx;d;:x')

# GARDEN_GRAPH_PATH is the root of the docker image filesystem
export GARDEN_GRAPH_PATH=/tmp/garden/graph
mkdir -p $GARDEN_GRAPH_PATH
mount -t tmpfs tmpfs $GARDEN_GRAPH_PATH

# workaround until Concourse's garden sets this up for us
if ! grep -qs '/sys' /proc/mounts; then
  mount -t sysfs sysfs /sys
fi

source $GARDEN_LINUX_GOPATH/ci/scripts/aufs
permit_device_control
create_loop_devices 256

nodes_flag=""
if [ "$GINKGO_PARALLEL" = "true" ]; then
  nodes_flag="-nodes=4"
fi

pushd $GOPATH_ROOT/src/github.com/cloudfoundry-incubator/inigo
  if [ "$GINKGO_PARALLEL" = "true" ]; then
    PACKAGES_TO_SKIP="docker"

    if [ -n "$SKIP_PACKAGES" ]; then
      PACKAGES_TO_SKIP=$PACKAGES_TO_SKIP",$SKIP_PACKAGES"
    fi

    if [ -z $SKIP_REGEX]; then
        ginkgo $nodes_flag -r -skipPackage=${PACKAGES_TO_SKIP} -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing "$@"
    else
        ginkgo $nodes_flag -r -skipPackage=${PACKAGES_TO_SKIP} -skip=${SKIP_REGEX} -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing "$@"
    fi

    # always run docker tests serially
    ginkgo -r -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing "$@" docker/
  else
    PACKAGES_TO_SKIP="executor"

    if [ -n "$SKIP_PACKAGES" ]; then
      PACKAGES_TO_SKIP=$PACKAGES_TO_SKIP",$SKIP_PACKAGES"
    fi

    # always attempt to run executor in parallel
    ginkgo -nodes=4 -r -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 "$@" executor/

    # run everything but executor with normal rules
    if [ -z $SKIP_REGEX]; then
        ginkgo $nodes_flag -r -skipPackage=${PACKAGES_TO_SKIP} -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing "$@"
    else
        ginkgo $nodes_flag -r -skipPackage=${PACKAGES_TO_SKIP} -skip=${SKIP_REGEX} -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing "$@"
    fi
  fi
popd
