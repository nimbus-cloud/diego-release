#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/stager
LOG_DIR=/var/vcap/sys/log/stager
DATA_DIR=/var/vcap/data/stager
CONF_DIR=/var/vcap/jobs/stager/config

PIDFILE=$RUN_DIR/stager.pid

source /var/vcap/packages/pid_utils/pid_utils.sh

<% if p("diego.stager.bbs.require_ssl") %>
  bbs_sec_flags=" \
   -bbsClientCert=${CONF_DIR}/certs/bbs/client.crt \
   -bbsClientKey=${CONF_DIR}/certs/bbs/client.key \
   -bbsCACert=${CONF_DIR}/certs/bbs/ca.crt"

  bbs_api_url="<%= "https://" + p("diego.stager.bbs.api_location") %>"
<% else %>
  bbs_sec_flags=""
  bbs_api_url="<%= "http://" + p("diego.stager.bbs.api_location") %>"
<% end %>

case $1 in

  start)
    pid_guard $PIDFILE "stager"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p $DATA_DIR
    chown -R vcap:vcap $DATA_DIR

    echo $$ > $PIDFILE

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    # Work around for GOLANG 1.5.3 DNS bug
    export GODEBUG=netdns=cgo

    exec chpst -u vcap:vcap /var/vcap/packages/stager/bin/stager ${bbs_sec_flags} \
      -bbsAddress=${bbs_api_url} \
      <% if_p("diego.stager.bbs.client_session_cache_size") do |value| %> \
        -bbsClientSessionCacheSize=<%= value %> \
      <% end %> \
      <% if_p("diego.stager.bbs.max_idle_conns_per_host") do |value| %> \
        -bbsMaxIdleConnsPerHost=<%= value %> \
      <% end %> \
      -dropsondePort=<%= p("diego.stager.dropsonde_port") %> \
      -listenAddress=<%= p("diego.stager.listen_addr") %> \
      -stagingTaskCallbackURL=<%= p("diego.stager.staging_task_callback_url") %> \
      -ccBaseURL=http://<%= p("diego.stager.cc.internal_service_hostname") %>:<%= p("diego.stager.cc.external_port") %> \
      -ccUsername=<%= Shellwords.shellescape(p("diego.stager.cc.basic_auth_username")) %> \
      -ccPassword=<%= Shellwords.shellescape(p("diego.stager.cc.basic_auth_password")) %> \
      -skipCertVerify=<%= p("diego.ssl.skip_cert_verify") %> \
      -debugAddr=<%= p("diego.stager.debug_addr") %> \
      <%= p("diego.stager.lifecycle_bundles").map { |bundle| "-lifecycle #{bundle}" }.join(" ") %> \
      -dockerStagingStack=<%= p("diego.stager.docker_staging_stack") %> \
      -fileServerURL=<%= p("diego.stager.file_server_url") %> \
      -ccUploaderURL=<%= p("diego.stager.cc_uploader_url") %> \
      -consulCluster=http://127.0.0.1:8500 \
      -dockerRegistryAddress=<%= p("diego.stager.docker_registry_address") %> \
      <% p("diego.stager.insecure_docker_registry_list").each do |url| %> \
        -insecureDockerRegistry=<%= url %> \
      <% end %> \
      -logLevel=<%= p("diego.stager.log_level") %> \
      2> >(tee -a $LOG_DIR/stager.stderr.log | logger -p user.error -t vcap.stager) \
      1> >(tee -a $LOG_DIR/stager.stdout.log | logger -p user.info -t vcap.stager)


    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: stager_ctl {start|stop}"

    ;;

esac
