<%=
  require 'uri'

  CONF_DIR = "/var/vcap/jobs/benchmark-bbs/config"
  TMP_DIR = "/var/vcap/data/executor/tmp"
  TRUSTED_CERTS_DIR = "/var/vcap/data/executor/trusted_certs"
  LOG_DIR = "/var/vcap/sys/log/benchmark-bbs"

  config = {
    active_key_label: p("benchmark-bbs.active_key_label"),
    aws_access_key_id: p("benchmark-bbs.aws_access_key_id"),
    aws_bucket_name: p("benchmark-bbs.aws_bucket_name"),
    aws_region: p("benchmark-bbs.aws_region"),
    aws_secret_access_key: p("benchmark-bbs.aws_secret_access_key"),
    bbs_client_http_timeout: p("benchmark-bbs.client_timeout"),
    datadog_api_key: p("benchmark-bbs.datadog_api_key"),
    datadog_app_key: p("benchmark-bbs.datadog_app_key"),
    desired_lrps: p("benchmark-bbs.desired_lrps"),
    local_route_emitters: p("benchmark-bbs.local_route_emitters"),
    locket_address: p("benchmark-bbs.locket.api_location"),
    locket_ca_cert_file: "#{CONF_DIR}/certs/bbs/ca.crt",
    locket_client_cert_file: "#{CONF_DIR}/certs/bbs/client.crt",
    locket_client_key_file: "#{CONF_DIR}/certs/bbs/client.key",
    log_level: p("benchmark-bbs.log_level"),
    metric_prefix: p("benchmark-bbs.datadog_metric_prefix"),
    num_populate_workers: p("benchmark-bbs.num_populate_workers"),
    num_reps: p("benchmark-bbs.num_reps"),
    num_trials: p("benchmark-bbs.num_trials"),
    percent_writes: p("benchmark-bbs.percent_writes"),
    reseed_database: p("benchmark-bbs.reseed_database"),
  }

  def db_params
    ['username', 'password', 'host', 'port', 'schema'].map {|name| "benchmark-bbs.sql.db_#{name}"}
  end

  def param_exists? param
    p(param) != ""
  end

  def connection_string_from_db_params
    return "" unless db_params.any? {|p| param_exists?(p)}

    unless db_params.all? {|p| param_exists?(p)}
      raise "all of the following parameters must be specified #{db_params.join(",")}"
    end

    values = db_params.map {|param| p(param)}
    # Note: order of the params is important here, it has to be username, password, host, port, schema in that order
    driver = p("benchmark-bbs.sql.db_driver")
    case driver
    when 'mysql'
      sprintf "%s:%s@tcp(%s:%s)/%s", *values
    when 'postgres'
      sprintf "postgres://%s:%s@%s:%s/%s", *values
    else
      raise "unknown driver #{driver}"
    end
  end

  connection_string = p("benchmark-bbs.sql.db_connection_string")

  if connection_string != "" && connection_string_from_db_params != ""
    raise "You can only specify 'benchmark-bbs.sql.db_connection_string' or '#{db_params.join(",")}'"
  end

  if connection_string == ""
    connection_string = connection_string_from_db_params
  end

  if connection_string == ""
    raise "#{db_params.join(",")} are required fields"
  end

  config[:database_connection_string] = connection_string

  if_p("benchmark-bbs.sql.db_driver") do |value|
    config[:database_driver] = value
  end

  config[:encryption_keys] = {}
  p("benchmark-bbs.encryption_keys").each do |encryption_key|
    label = encryption_key["label"]
    key   = encryption_key["passphrase"]
    config[:encryption_keys][label] = key
  end

  if_p("benchmark-bbs.log_file") do |value|
    config[:log_filename] = "#{LOG_DIR}/#{value}"
  end

  if p("benchmark-bbs.etcd.machines").size > 0
    scheme = "http"
    if p("benchmark-bbs.etcd.require_ssl")
      scheme = "https"
      config[:etcd_cert_file] = "#{CONF_DIR}/certs/etcd/client.crt"
      config[:etcd_key_file] = "#{CONF_DIR}/certs/etcd/client.key"
      config[:etcd_ca_file] = "#{CONF_DIR}/certs/etcd/ca.crt"
    end

    config[:etcd_cluster_urls] = p("benchmark-bbs.etcd.machines").map{|addr| "#{scheme}://#{addr}:4001"}
      if_p("benchmark-bbs.etcd.client_session_cache_size") do |value|
      config[:etcd_client_session_cache_size] = value
    end
    if_p("benchmark-bbs.etcd.max_idle_conns_per_host") do |value|
      config[:etcd_max_idle_conns_per_host] = value
    end
  end

  if p("benchmark-bbs.bbs.require_ssl")
    config[:bbs_address] = "https://#{p("benchmark-bbs.bbs.api_location")}"
    config[:bbs_ca_cert] = "#{CONF_DIR}/certs/bbs/ca.crt"
    config[:bbs_client_cert] = "#{CONF_DIR}/certs/bbs/client.crt"
    config[:bbs_client_key] = "#{CONF_DIR}/certs/bbs/client.key"
  else
    config[:bbs_address] = "http://#{p("benchmark-bbs.bbs.api_location")}"
  end

  config.to_json
%>
